/*
 * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os
import groovyx.gpars.GParsPool

buildscript {
    repositories {
        def repository = maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/plugin-gradle'
            credentials {
                username System.getenv('packageUser')
                password System.getenv('packagePAT')
            }
        }
        mavenCentral()
    }
    dependencies {
        classpath "io.ballerina:plugin-gradle:${project.ballerinaGradlePluginVersion}"
        classpath "org.codehaus.gpars:gpars:1.1.0"
    }
}

description = 'Ballerina - Oracle DB Ballerina Generator'

def packageName = 'oracledb'
def packageOrg = 'ballerinax'
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaDependencyFile = new File("$project.projectDir/Dependencies.toml")
def originalConfig = ballerinaConfigFile.text
def originalDependencies = ballerinaDependencyFile.text

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", '')
    }
}

apply plugin: 'io.ballerina.plugin'

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
}

dependencies {
    externalJars(group: 'io.ballerina.stdlib', name: 'sql-native', version: "${stdlibSqlVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def stdlibDependentSqlVersion = stripBallerinaExtensionVersion(project.stdlibSqlVersion)
        def stdlibCryptoVersion = stripBallerinaExtensionVersion(project.stdlibCryptoVersion)

        def newConfig = ballerinaConfigFile.text.replace('@project.version@', project.version.toString())
        newConfig = newConfig.replace('@toml.version@', tomlVersion)
        newConfig = newConfig.replace('@stdlib.sql.native.version@', project.stdlibSqlVersion.toString())
        newConfig = newConfig.replace('@stdlib.sql.version@', stdlibDependentSqlVersion)
        newConfig = newConfig.replace('@oracledb.driver.version@', project.oracleDBDriverVersion)
        newConfig = newConfig.replace('@oracle.xdb.version@', project.oracleXDBVersion)
        newConfig = newConfig.replace('@oracle.xmlparserv2.version@', project.oracleXMLParserVersion)

        ballerinaConfigFile.text = newConfig

        def newDependencyConfig = ballerinaDependencyFile.text.replace('@stdlib.sql.version@', stdlibDependentSqlVersion)
        newDependencyConfig = newDependencyConfig.replace('@stdlib.crypto.version@', stdlibCryptoVersion)
        ballerinaDependencyFile.text = newDependencyConfig
    }
}

task revertTomlFiles {
    doLast {
        ballerinaConfigFile.text = originalConfig
        ballerinaDependencyFile.text = originalDependencies
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv('publishUser')
                password = System.getenv('publishPAT')
            }
        }
    }
}

def checkExecResult(execResult, failText, standardOutput) {
    if (execResult) {
        if (execResult.getExitValue() != 0) {
            throw new GradleException('Non-zero exit value: ' + execResult.getExitValue())
        }
        if (standardOutput.toString().contains(failText)) {
            throw new GradleException('"' + failText + '" string in output: ' + standardOutput.toString())
        }
    } else {
        throw new GradleException('Returned a null execResult object')
    }
}

task createTestDockerImage(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', "docker build -f $project.projectDir/tests/resources/Dockerfile -t ballerina-oracledb" +
                " -q $project.projectDir/tests/resources/"
        doLast {
            checkExecResult(execResult, 'Error', standardOutput)
            sleep(10 * 1000)
        }
    }
}

def waitForContainerHealth(containerName) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def HEALTH_STATUS;
        def counter = 0
        while (counter < 60) {
            sleep(10000)
            def output = new ByteArrayOutputStream()
            try {
                exec {
                    commandLine 'sh', '-c',
                            "docker inspect --format='{{json .State.Health.Status}}' ${containerName}"
                    standardOutput = output
                }
                HEALTH_STATUS = output.toString().trim()
                if (HEALTH_STATUS.toString().contains("healthy")) {
                    return 0
                }
                if (counter % 6 == 0) {
                    println("${counter/6}: Waiting for container ${containerName} to be healthy")
                    println("   HEALTH_STATUS: $HEALTH_STATUS \n")
                }
                counter = counter + 1
            } catch (err) {
                println(err)
                return 1
            }
        }
        return 1
    }
}

def initializeDatabase(containerName) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        println("Waiting for ${containerName} database to open.")
        sleep(3*60*1000)
        try {
            def temp = exec {
                commandLine 'sh', '-c',
                        "docker exec ${containerName} /bin/bash -c 'cd home/oracle && source .bashrc; sqlplus /nolog <<< @create-schema.sql'"
            }.exitValue
            return temp
        } catch (all) {
            println(all)
            return 1
        }
    }
}

def startDockerContainer(containerName, port) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        exec {
            commandLine 'sh', '-c', "docker run --rm -d --name ${containerName} -p ${port}:1521 -t ballerina-oracledb"
        }
        def healthCheck = waitForContainerHealth(containerName)
        if (healthCheck != 0) {
            throw new GradleException("Docker container '${containerName}' health test failed!")
        }
        println("Docker container '${containerName}' health test passed!")

        def initializeCheck = initializeDatabase(containerName)
        if(initializeCheck != 0) {
            throw new GradleException("Failed to initialize the database!")
        }
        println("Database initialized!")

    }
}

task startTestDockerContainers() {
    doLast {
        if ((project.hasProperty("groups") && !project.findProperty("groups").contains("pool")) ||
                (project.hasProperty("disable-groups") && project.findProperty("disable-groups").contains("pool"))) {
            startDockerContainer("ballerina-oracledb", 1521)
        } else {
            GParsPool.withPool { GParsPool.executeAsyncAndWait(
                    {startDockerContainer("ballerina-oracledb", 1521)},
                    {startDockerContainer("ballerina-oracledb-pool", 1522)}
            )}
        }
    }
}

task stopTestDockerContainers() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            def containers = ""
            if ((project.hasProperty("groups") && !project.findProperty("groups").contains("pool")) ||
                    (project.hasProperty("disable-groups") && project.findProperty("disable-groups").contains("pool"))) {
                containers = "ballerina-oracledb"
            } else {
                containers = "ballerina-oracledb ballerina-oracledb-pool"
            }

            try {
                def stdOut = new ByteArrayOutputStream()
                exec {
                    commandLine 'sh', '-c', "docker stop ${containers}"
                    standardOutput = stdOut
                }
            } catch (ignore) {
                println("Gradle process can safely ignore stopTestDockerContainers task")
            }
        }
    }
}

updateTomlFiles.dependsOn copyStdlibs
startTestDockerContainers.dependsOn createTestDockerImage

build.dependsOn ":${packageName}-native:build"
test.dependsOn ":${packageName}-native:build"
build.finalizedBy stopTestDockerContainers
test.dependsOn startTestDockerContainers

publishToMavenLocal.dependsOn build
publish.dependsOn build
